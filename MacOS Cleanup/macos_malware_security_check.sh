#!/bin/bash

# Enhanced macOS Security and Malware Check Script
# Version: 1.1
# Last Updated: August 24, 2025
# Description: This script performs basic checks for common malware, suspicious processes, unsigned kernel extensions,
#              recent system modifications, and overall security status on macOS. It provides smart, color-coded terminal
#              outputs with summaries, explanations, and recommendations. Improved to reduce false positives by using more
#              specific malware keywords, excluding system paths where appropriate, and fixing command paths for tools like
#              XProtect and MRT. For deeper analysis, it suggests using Malwarebytes.
#              Note: This is not a replacement for professional antivirus software. Run as a regular user; sudo prompts
#              will appear where needed. Supports macOS Ventura (13) and later; some features may vary on older versions.

# Enable strict mode
set -euo pipefail

# Colors for smart outputs (ANSI escape codes)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print section headers
echo_section() {
  echo -e "\n${BLUE}==============================${NC}"
  echo -e "${BLUE}$1${NC}"
  echo -e "${BLUE}==============================${NC}"
}

# Function to log messages (appends to ~/security_check_log.txt)
log_message() {
  local type="$1"
  local message="$2"
  echo "$(date '+%Y-%m-%d %H:%M:%S') [$type] $message" >> ~/security_check_log.txt
  case "$type" in
    "ERROR") echo -e "${RED}$message${NC}" ;;
    "WARNING") echo -e "${YELLOW}$message${NC}" ;;
    "INFO") echo -e "${GREEN}$message${NC}" ;;
    *) echo "$message" ;;
  esac
}

# Initialize log
echo "" > ~/security_check_log.txt
log_message "INFO" "Security check started."

# Specific malware keywords (based on common macOS threats like those from Objective-See and SentinelOne)
MALWARE_KEYWORDS='xmrig|monero|adload|pirrit|shlayer|bundlore|genieo|macstealer|atomicstealer|xcset|kandykorn|rustdoor|evil|trojan|miner|keylog|backdoor|ransom|phish'

# 1. Verify macOS Version
echo_section "Checking macOS Version"
macos_version=$(sw_vers -productVersion)
echo "Current macOS version: $macos_version"
if [[ "$macos_version" < "13.0" ]]; then
  log_message "WARNING" "This script is optimized for macOS Ventura (13) and later. Some checks may not work as expected."
fi

# 2. Check for Known Malware using XProtect and MRT (updated paths and commands)
echo_section "Checking for Known Malware (XProtect and MRT)"
# Check XProtect version (cannot run manual scan, but check status/version)
xprotect_version=$(defaults read /Library/Apple/System/Library/CoreServices/XProtect.bundle/Contents/Info.plist CFBundleShortVersionString 2>/dev/null || echo "Unknown")
if [ "$xprotect_version" != "Unknown" ]; then
  log_message "INFO" "XProtect version: $xprotect_version (Up to date if recent; macOS auto-updates it)."
else
  log_message "WARNING" "Unable to check XProtect version."
fi

# Run MRT (Malware Removal Tool)
mrt_path="/System/Library/CoreServices/MRT.app/Contents/MacOS/MRT"
if [ -x "$mrt_path" ]; then
  echo "Running MRT (this may take a moment)..."
  sudo "$mrt_path" || log_message "ERROR" "MRT execution failed."
  log_message "INFO" "MRT scan complete. If malware was found, it should have been removed automatically."
else
  log_message "WARNING" "MRT tool not found at $mrt_path; skipping."
fi

# 3. Check for Suspicious Processes (exclude system paths to reduce false positives)
echo_section "Checking for Suspicious Processes"
suspicious_processes=$(ps aux | grep -iE "$MALWARE_KEYWORDS" | grep -v grep | grep -vE '^/System/|^/usr/libexec/|^/Library/Apple/' | awk '{print $11 " (PID: " $2 ", User: " $1 ")"}' || true)
if [ -z "$suspicious_processes" ]; then
  log_message "INFO" "No suspicious processes found. (System processes excluded to avoid false positives.)"
else
  log_message "WARNING" "Potential suspicious processes detected (review if unexpected):"
  echo "$suspicious_processes" | while IFS= read -r line; do
    echo -e "${YELLOW}- $line${NC}"
  done
fi

# 4. Check for Suspicious LaunchAgents/LaunchDaemons (focus on user and /Library, use specific keywords)
echo_section "Checking LaunchAgents and LaunchDaemons"
suspicious_launch=$(find ~/Library/LaunchAgents /Library/LaunchAgents /Library/LaunchDaemons -type f 2>/dev/null | xargs grep -iE "$MALWARE_KEYWORDS" 2>/dev/null || true)
if [ -z "$suspicious_launch" ]; then
  log_message "INFO" "No suspicious LaunchAgents or Daemons found in user-editable locations."
else
  log_message "WARNING" "Potential suspicious entries in LaunchAgents/Daemons (review plist files):"
  echo "$suspicious_launch" | while IFS= read -r line; do
    echo -e "${YELLOW}- $line${NC}"
  done
fi

# 5. Check for Unsigned Kernel Extensions (Kexts)
echo_section "Checking for Unsigned Kernel Extensions"
# Note: Kexts are deprecated in newer macOS; this check is for legacy support
unsigned_kexts=$(kextstat 2>/dev/null | grep -v com.apple | awk '{print $6 " (Index: " $1 ", Size: " $4 "K)"}' || true)
if [ -z "$unsigned_kexts" ]; then
  log_message "INFO" "No unsigned or third-party kexts found."
else
  log_message "WARNING" "Third-party or unsigned kexts detected (review for legitimacy; kexts are deprecated):"
  echo "$unsigned_kexts" | while IFS= read -r line; do
    echo -e "${YELLOW}- $line${NC}"
  done
fi

# 6. Check for Recent System Modifications (improved formatting)
echo_section "Checking for Recent System Modifications"
recent_mods=$(ls -lt /Library/LaunchDaemons /Library/LaunchAgents ~/Library/LaunchAgents /etc /var/db /Library/Preferences 2>/dev/null | head -20 | awk 'NF>8 {print $6 " " $7 " " $8 " - " substr($0, index($0,$9))}' || true)
if [ -z "$recent_mods" ]; then
  log_message "INFO" "No recent modifications found in monitored directories."
else
  log_message "INFO" "Recent modifications (top 20; check for unexpected changes):"
  echo "$recent_mods" | while IFS= read -r line; do
    echo "- $line"
  done
fi

# 7. Check Basic Security Status
echo_section "Checking Basic Security Status"

# System Integrity Protection (SIP)
sip_status=$(csrutil status 2>/dev/null | awk -F': ' '{print $2}' | sed 's/\.$//' || echo "Unknown")
if [[ "$sip_status" == "enabled" ]]; then
  log_message "INFO" "System Integrity Protection (SIP): Enabled (Good)."
else
  log_message "WARNING" "System Integrity Protection (SIP): $sip_status (Consider enabling if disabled)."
fi

# Firewall Status
firewall_status=$(defaults read /Library/Preferences/com.apple.alf globalstate 2>/dev/null || echo "0")
if [[ "$firewall_status" -ge 1 ]]; then
  log_message "INFO" "Firewall: Enabled (Good)."
else
  log_message "WARNING" "Firewall: Disabled (Recommend enabling in System Settings > Network > Firewall)."
fi

# Gatekeeper Status
gatekeeper_status=$(spctl --status 2>/dev/null || echo "assessments disabled")
if [[ "$gatekeeper_status" == "assessments enabled" ]]; then
  log_message "INFO" "Gatekeeper: Enabled (Good)."
else
  log_message "WARNING" "Gatekeeper: $gatekeeper_status (Recommend enabling)."
fi

# FileVault Status
filevault_status=$(fdesetup status 2>/dev/null || echo "FileVault is Off.")
if [[ "$filevault_status" == *"FileVault is On."* ]]; then
  log_message "INFO" "FileVault: Enabled (Good)."
else
  log_message "WARNING" "FileVault: Disabled (Recommend enabling for disk encryption in System Settings > Privacy & Security > FileVault)."
fi

# 8. Check for Suspicious Network Connections (improved grep for anomalies)
echo_section "Checking Suspicious Network Connections"
suspicious_net=$(lsof -iTCP -sTCP:ESTABLISHED -P -n 2>/dev/null | grep -iE 'unknown|suspicious|malware|192\.168\.[0-9]+\.[0-9]+:.*\(ESTABLISHED\)' || true)  # Example: Look for unknown or local anomalies
if [ -z "$suspicious_net" ]; then
  log_message "INFO" "No suspicious network connections found. (For full list, run 'lsof -i' manually.)"
else
  log_message "WARNING" "Potential suspicious connections detected (review destinations):"
  echo "$suspicious_net" | awk '{print $1 " (PID: " $2 ") -> " $9}' | while IFS= read -r line; do
    echo -e "${YELLOW}- $line${NC}"
  done
fi

# 9. Check for Rootkits using Built-in Tools (fixed logic)
echo_section "Checking for Rootkits"
if sudo /usr/bin/periodic daily weekly monthly >/dev/null 2>&1; then
  log_message "INFO" "Periodic maintenance tasks run successfully (includes basic system checks). Check /var/log/system.log for details."
else
  log_message "ERROR" "Failed to run periodic tasks. Check permissions or run manually."
fi

# 10. Check for Remote Logins
echo_section "Checking for Remote Logins (SSH, Screen Sharing)"
remote_logins=$(who | grep -E 'sshd|screensharing' || true)
if [ -z "$remote_logins" ]; then
  log_message "INFO" "No remote logins detected."
else
  log_message "WARNING" "Remote logins detected (verify if expected):"
  echo "$remote_logins" | while IFS= read -r line; do
    echo -e "${YELLOW}- $line${NC}"
  done
fi

# 11. Check for Recent Failed Login Attempts (improved grep)
echo_section "Checking for Recent Failed Login Attempts"
failed_logins=$(grep -E 'failed to authenticate|Failed password' /var/log/system.log /var/log/secure.log 2>/dev/null | tail -10 || true)
if [ -z "$failed_logins" ]; then
  log_message "INFO" "No recent failed login attempts found."
else
  log_message "WARNING" "Recent failed login attempts (possible brute-force; review):"
  echo "$failed_logins" | while IFS= read -r line; do
    echo -e "${YELLOW}- $line${NC}"
  done
fi

# 12. Advanced Rootkit Check Suggestion
echo_section "Advanced Rootkit Check (Manual)"
echo -e "For deeper rootkit detection, install and run ${YELLOW}chkrootkit${NC} or ${YELLOW}rkhunter${NC} (requires Homebrew or manual install):"
echo -e "  brew install chkrootkit rkhunter"
echo -e "  sudo chkrootkit"
echo -e "  sudo rkhunter --check"
echo -e "These tools scan for known rootkits and backdoors."

# 13. Additional Check: Open Ports
echo_section "Checking Open Ports"
open_ports=$(lsof -i -P -n | grep LISTEN || true)
if [ -z "$open_ports" ]; then
  log_message "INFO" "No open ports detected."
else
  log_message "INFO" "Open ports (review for unexpected services):"
  echo "$open_ports" | awk '{print $1 " (PID: " $2 ") listening on " $9}' | sort -u | while IFS= read -r line; do
    echo "- $line"
  done
fi

# 14. Summary of Warnings/Errors
echo_section "Summary of Security Check Results"
warning_count=$(grep -c '\[WARNING\]' ~/security_check_log.txt)
error_count=$(grep -c '\[ERROR\]' ~/security_check_log.txt)
echo -e "${YELLOW}Warnings found: $warning_count${NC}"
echo -e "${RED}Errors found: $error_count${NC}"
if [ "$warning_count" -eq 0 ] && [ "$error_count" -eq 0 ]; then
  echo -e "${GREEN}No major issues detected. Your Mac appears secure based on these checks.${NC}"
else
  echo -e "${YELLOW}Review the log at ~/security_check_log.txt and investigate any warnings or errors.${NC}"
  echo -e "Note: Some warnings may be false positives; cross-check with Activity Monitor or trusted sources."
fi

# 15. Recommendations
echo_section "Recommendations"
echo -e "For a deeper scan and removal, download and run ${GREEN}Malwarebytes${NC} from https://www.malwarebytes.com/mac."
echo "Additional tips:"
echo "- Keep macOS and apps updated via System Settings > General > Software Update."
echo "- Use strong, unique passwords and enable two-factor authentication everywhere."
echo "- Avoid downloading from untrusted sources; prefer the App Store."
echo "- Regularly back up your data with Time Machine or another tool."
echo "- Enable FileVault if not already (see warning above)."
echo "- If suspicious activity persists, isolate the Mac, run a full antivirus scan, and seek professional help."
echo "- Monitor browser extensions: In Safari/Chrome/Firefox, review and remove unknown ones."

log_message "INFO" "Security check complete. Log saved to ~/security_check_log.txt"
echo -e "\n${GREEN}Security checks complete. Review the outputs for any issues.${NC}"